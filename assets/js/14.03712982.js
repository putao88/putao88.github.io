(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{372:function(t,a,s){"use strict";s.r(a);var n=s(25),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"执行环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行环境"}},[t._v("#")]),t._v(" 执行环境")]),t._v(" "),s("ul",[s("li",[t._v("执行环境定义了变量或函数有权访问的其他数据。")]),t._v(" "),s("li",[t._v("每个执行环境都有一个与之关联的变量对象。环境中定义的所有变量和函数都保存在这个对象中")]),t._v(" "),s("li",[t._v("每个函数都有自己的执行环境，当执行流进入一个函数时，函数的环境就会被推入一个环境栈中。而在函数执行之后，栈将其环境弹出，把控制权限返回给之前的执行环境")]),t._v(" "),s("li",[t._v("execution context\n顾名思义 执行环境/执行上下文。在javascript中，执行环境可以抽象的理解为一个object，它由以下几个属性构成")])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("executionContext："),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    variable object：vars"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("functions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    scope chain"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" variable object "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" all parents scopes\n    thisValue"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" context object\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h2",{attrs:{id:"执行上下文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文"}},[t._v("#")]),t._v(" 执行上下文")]),t._v(" "),s("ul",[s("li",[t._v("可执行代码：全局代码、函数代码、eval代码")]),t._v(" "),s("li",[t._v("JavaScript 引擎创建了执行上下文栈（Execution context stack，ECS）来管理执行上下文")]),t._v(" "),s("li",[t._v("对于每个执行上下文，都有三个重要属性：\n"),s("ol",[s("li",[t._v("变量对象(Variable object，VO)")]),t._v(" "),s("li",[t._v("作用域链(Scope chain)")]),t._v(" "),s("li",[t._v("this")])])])]),t._v(" "),s("h2",{attrs:{id:"变量对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量对象"}},[t._v("#")]),t._v(" 变量对象")]),t._v(" "),s("ul",[s("li",[t._v("变量对象是与执行上下文相关的数据作用域")]),t._v(" "),s("li",[t._v("在函数上下文中，我们用活动对象(activation object, AO)来表示变量对象")]),t._v(" "),s("li",[t._v("执行上下文的代码会分成两个阶段进行处理：分析和执行")]),t._v(" "),s("li",[t._v("进入执行上下文后，变量对象包括：\n"),s("ol",[s("li",[s("strong",[t._v("函数的所有形参 (如果是函数上下文)")]),t._v("\n由名称和对应值组成的一个变量对象的属性被创建\n没有实参，属性值设为 undefined")]),t._v(" "),s("li",[s("strong",[t._v("函数声明")]),t._v("\n由名称和对应值（函数对象(function-object)）组成一个变量对象的属性被创建\n如果变量对象已经存在相同名称的属性，则完全替换这个属性")]),t._v(" "),s("li",[s("strong",[t._v("变量声明")]),t._v("\n由名称和对应值（undefined）组成一个变量对象的属性被创建；\n如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性")])])]),t._v(" "),s("li",[t._v("综合：\n"),s("ol",[s("li",[t._v("全局上下文的变量对象初始化是全局对象")]),t._v(" "),s("li",[t._v("函数上下文的变量对象初始化只包括 Arguments 对象")]),t._v(" "),s("li",[t._v("在进入执行上下文时会给变量对象添加形参、函数声明、变量声明等初始的属性值")]),t._v(" "),s("li",[t._v("在代码执行阶段，会再次修改变量对象的属性值")])])])]),t._v(" "),s("h2",{attrs:{id:"作用域链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用域链"}},[t._v("#")]),t._v(" 作用域链")]),t._v(" "),s("ul",[s("li",[t._v("javascript是使用静态作用域的语言，他的作用域在函数创建的时候便已经确定(不含arguments)")]),t._v(" "),s("li",[t._v("当代码在在一个环境中执行时，会创建变量对象的一个作用域链")]),t._v(" "),s("li",[t._v("作用域链的用途是保证对执行环境有权访问的所有变量和函数的有序访问")]),t._v(" "),s("li",[t._v("作用域链本质上是一个指向变量对象的指针列表，它只引用，但不实际包含变量对象")])]),t._v(" "),s("h2",{attrs:{id:"this"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#this"}},[t._v("#")]),t._v(" this")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("this指向")]),t._v(" "),s("ol",[s("li",[t._v("函数是否在new中调用(new绑定)，如果是，那么this绑定的是新创建的对象。")]),t._v(" "),s("li",[t._v("函数是否通过call,apply调用，或者使用了bind(即硬绑定)，如果是，那么this绑定的就是指定的对象。")]),t._v(" "),s("li",[t._v("函数是否在某个上下文对象中调用(隐式绑定)，如果是的话，this绑定的是那个上下文对象。一般是obj.foo()")]),t._v(" "),s("li",[t._v("如果以上都不是，那么使用默认绑定。如果在严格模式下，则绑定到undefined，否则绑定到全局对象。")]),t._v(" "),s("li",[t._v("如果把null或者undefined作为this的绑定对象传入call、apply或者bind，这些值在调用时会被忽略，实际应用的是默认绑定规则。")]),t._v(" "),s("li",[t._v("如果是箭头函数，箭头函数的this继承的是外层代码块的this。")])])]),t._v(" "),s("li",[s("p",[t._v("bind\nbind 方法的返回值是函数，并且需要稍后调用，才会执行")])]),t._v(" "),s("li",[s("p",[t._v("call")]),t._v(" "),s("ol",[s("li",[t._v("调用 call 的对象，必须是个函数 Function。")]),t._v(" "),s("li",[t._v("call 的第一个参数，是一个对象。 Function 的调用者，将会指向这个对象。如果不传，则默认为全局对象 window。")]),t._v(" "),s("li",[t._v("第二个参数开始，可以接收任意个参数。每个参数会映射到相应位置的 Function 的参数上。但是如果将所有的参数作为数组传入，它们会作为一个整体映射到 Function 对应的第一个参数上，之后参数都为空")])])]),t._v(" "),s("li",[s("p",[t._v("apply")]),t._v(" "),s("ol",[s("li",[t._v("它的调用者必须是函数 Function，并且只接收两个参数，第一个参数的规则与 call 一致。")]),t._v(" "),s("li",[t._v("第二个参数，必须是数组或者类数组，它们会被转换成类数组，传入 Function 中，并且会被映射到 Function 对应的参数上。这也是 call 和 apply 之间，很重要的一个区别。")])])]),t._v(" "),s("li",[s("p",[t._v("类数组:\n具备与数组特征类似的对象.比如，下面的这个对象，就是一个类数组。我们获取 DOM 节点的方法，返回的就是一个类数组。\n但是需要注意的是：类数组无法使用 forEach、splice、push 等数组原型链上的方法，毕竟它不是真正的数组。")])])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arrayLike "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    length"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])])])}),[],!1,null,null,null);a.default=e.exports}}]);