(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{365:function(t,i,r){"use strict";r.r(i);var a=r(45),e=Object(a.a)({},(function(){var t=this,i=t.$createElement,r=t._self._c||i;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"_1-git创建新的分支"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-git创建新的分支"}},[t._v("#")]),t._v(" 1.\tgit创建新的分支")]),t._v(" "),r("ol",[r("li",[t._v("创建步骤\n"),r("ol",[r("li",[t._v("新建一个本地分支\n"),r("ol",[r("li",[t._v("git checkout -b 新分支名称")])])]),t._v(" "),r("li",[t._v("查看一下现在的分支状态\n"),r("ol",[r("li",[t._v("git branch")])])]),t._v(" "),r("li",[t._v("把新建的本地分支push到远程服务器，远程分支与本地分支同名（当然可以随意起名）\n"),r("ol",[r("li",[t._v("git push origin 新分支名称: 新分支名称")])])]),t._v(" "),r("li",[t._v("使用git branch -a查看所有分支，会看到remotes/origin/dbg_lichen_star这个远程分支，说明新建远程分支成功。")])])])]),t._v(" "),r("h3",{attrs:{id:"新分支提交报错"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#新分支提交报错"}},[t._v("#")]),t._v(" 新分支提交报错")]),t._v(" "),r("h4",{attrs:{id:"_1-git-pull报错-there-is-no-tracking-information-for-the-current-branch"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-git-pull报错-there-is-no-tracking-information-for-the-current-branch"}},[t._v("#")]),t._v(" 1. git pull报错:There is no tracking information for the current branch")]),t._v(" "),r("p",[t._v("是因为本地分支和远程分支没有建立联系 (使用git branch -vv 可以查看本地分支和远程分支的关联关系) .根据命令行提示只需要执行以下命令即可\ngit branch --set-upstream-to=origin/远分支的名字  本地分支的名字")]),t._v(" "),r("h4",{attrs:{id:"_2-删除分支"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-删除分支"}},[t._v("#")]),t._v(" 2.删除分支")]),t._v(" "),r("p",[t._v("1、删除本地分：git branch -d <分支名>\n2、删除远程分支：git push origin --delete <分支名>")]),t._v(" "),r("h2",{attrs:{id:"_2-创建一个新的远程仓库"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-创建一个新的远程仓库"}},[t._v("#")]),t._v(" 2.创建一个新的远程仓库")]),t._v(" "),r("h3",{attrs:{id:"_1-本地没有仓库"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-本地没有仓库"}},[t._v("#")]),t._v(" 1.本地没有仓库")]),t._v(" "),r("p",[t._v('echo "# dream-blog" >> README.md\ngit init\ngit add README.md\ngit commit -m "first commit"\ngit remote add origin https://github.com/putao88/dream-blog.git（https的连接方式）\ngit push -u origin master')]),t._v(" "),r("h3",{attrs:{id:"_2-本地已有项目"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-本地已有项目"}},[t._v("#")]),t._v(" 2.本地已有项目")]),t._v(" "),r("p",[t._v("git remote add origin https://github.com/putao88/dream-blog.git")]),t._v(" "),r("h2",{attrs:{id:"_3-解决git仓库从http转为ssh所要处理的问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-解决git仓库从http转为ssh所要处理的问题"}},[t._v("#")]),t._v(" 3.解决git仓库从http转为ssh所要处理的问题")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[t._v('1、切换协议：\n1. 查看当前remote\ngit remote -v\n2. 协议之间的切换http和ssh：\n1）先增加新的协议:\ngit remote set-url --add origin 协议url \n2)删除原先的协议\ngit remote set-url --delete origin 原协议url\n3）push新的协议\ngit remote set-url --push origin 新协议url\n2、git已设置用户名和邮箱\ngit config --global user.name "YourName"\ngit config --global user.email email@mail.com\n3、你的home目录下是否已经生成过ssh-key，没生成，就创建一个\n\tsh-keygen -t rsa -C "email@mail.com"\n4、远程git仓库加入你的公钥(注：gitea、gitlab、github一般在用户的设置页面添加，如果远程是通过git init初始化的项目，请追加到远程机器的~/.ssh/authorized_keys 文件中)\n\tat .~/ssh/id_rsa.pub\n')])])]),r("h2",{attrs:{id:"_4-git迁移仓库地址"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-git迁移仓库地址"}},[t._v("#")]),t._v(" 4. git迁移仓库地址")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[t._v("最近迁移git 项目地址。\n想保留原有分支和提交\n网上搜索了好多步骤都很繁琐。最后发现了最优的解决方案。\n1.先克隆老项目的镜像\ngit clone --mirror old.git (old.git 为老项目的git地址)\n2.进入老项目的目录\ncd old.git\n3.移除老项目的地址替换成新项目\ngit remote set-url --push origin  new.git (new.git 为新项目的git地址)\n4.将镜像推到远程\ngit push --mirror  //这一步需要输入新的git的账号和密码\n")])])]),r("h2",{attrs:{id:"_5-git各种报错合集"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-git各种报错合集"}},[t._v("#")]),t._v(" 5.git各种报错合集")]),t._v(" "),r("h3",{attrs:{id:"_1-git-push报错-error-failed-to-push-some-refs-to-git-github-com-xxx-xxx-git-解决方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-git-push报错-error-failed-to-push-some-refs-to-git-github-com-xxx-xxx-git-解决方法"}},[t._v("#")]),t._v(" 1. git push报错： error: failed to push some refs to ‘git@github.com:xxx/xxx.git‘解决方法")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[t._v("解决方案： 由于github 中的 README.md文件 不在本地代码目录中，这时候可以通过 git pull --rebase origin master 把README.md文件克隆到本地库。此时再执行 git push origin master 就可以完成上传到远程仓库的操作了\n")])])]),r("h3",{attrs:{id:"_2-gitignore-不生效的解决方案"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-gitignore-不生效的解决方案"}},[t._v("#")]),t._v(" 2..gitignore 不生效的解决方案")]),t._v(" "),r("p",[t._v("当我们将 .gitignore 文件配置好后，却往往不能失效。这是因为 .gitignore 只能忽略那些没有被追踪(track)的文件，因为 git 存在本地缓存，如果文件已经纳入了版本管理，那么修改 .gitignore 是不能失效的。那么解决方案就是要将 git 的本地缓存删除，然后重新提交")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[t._v('git rm -r --cached .\ngit add .\ngit commit -m "update .gitignore"\n')])])])])}),[],!1,null,null,null);i.default=e.exports}}]);