(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{455:function(t,r,e){"use strict";e.r(r);var a=e(25),s=Object(a.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"_1-url输入到页面呈现的过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-url输入到页面呈现的过程"}},[t._v("#")]),t._v(" 1.url输入到页面呈现的过程")]),t._v(" "),e("h3",{attrs:{id:"_1-概览"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-概览"}},[t._v("#")]),t._v(" 1.概览")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.cn/post/6844903784229896199",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[t._v("大致过程")]),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/34453198?group_id=957277541711540224",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[t._v("详细讲解")]),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("这一过程包含了很多知识点，包括浏览器缓存，浏览器渲染原理等，网络请求等")]),t._v(" "),e("h3",{attrs:{id:"_2-浏览器缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-浏览器缓存"}},[t._v("#")]),t._v(" 2.浏览器缓存")]),t._v(" "),e("h4",{attrs:{id:"_1-相关链接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-相关链接"}},[t._v("#")]),t._v(" 1.相关链接")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.cnblogs.com/chenqf/p/6386163.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP缓存机制及原理"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.cn/post/6844903763665240072",target:"_blank",rel:"noopener noreferrer"}},[t._v("浏览器缓存"),e("OutboundLink")],1)]),t._v(" "),e("h4",{attrs:{id:"_2-知识点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-知识点"}},[t._v("#")]),t._v(" 2.知识点")]),t._v(" "),e("p",[e("strong",[t._v("浏览器缓存规则表查看地址")]),t._v("：chrome://net-internals/#httpCache\n"),e("strong",[t._v("注意")]),t._v("：")]),t._v(" "),e("blockquote",[e("p",[t._v("1.协商缓存无论如何，都要向服务端发请求的，只不过，资源未更改时，返回的只是header信息，所以size很小；而资源有更改时，还要返回body数据，所以size会大")])]),t._v(" "),e("blockquote",[e("p",[t._v("2.强制缓存>协商缓存：当强制缓存命中，且过期了，才执行协商缓存；当强制缓存未过期，直接调用缓存数据，不实用协商缓存")])]),t._v(" "),e("p",[e("strong",[t._v("浏览器缓存策略:")]),t._v(" "),e("img",{attrs:{src:"/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5.image",alt:"浏览器缓存策略"}})]),t._v(" "),e("p",[e("strong",[t._v("强缓存和协商缓存状态码:")]),t._v(" "),e("img",{attrs:{src:"/%E5%BC%BA%E7%BC%93%E5%AD%98%E5%92%8C%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98%E7%8A%B6%E6%80%81%E7%A0%81.image",alt:"强缓存和协商缓存状态码.png"}})]),t._v(" "),e("p",[e("strong",[t._v("用户行为对缓存的影响:")]),t._v(" "),e("img",{attrs:{src:"/%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA%E5%AF%B9%E7%BC%93%E5%AD%98%E7%9A%84%E5%BD%B1%E5%93%8D.image",alt:"用户行为对缓存的影响.png"}}),t._v("\n即：F5 会 跳过强缓存规则，直接走协商缓存；；；Ctrl+F5 ，跳过所有缓存规则，和第一次请求一样，重新获取资源")]),t._v(" "),e("h3",{attrs:{id:"_3-浏览器渲染原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-浏览器渲染原理"}},[t._v("#")]),t._v(" 3.浏览器渲染原理")]),t._v(" "),e("p",[t._v("浏览器渲染原理的衍生问题是，性能优化，如何减少重绘和重排(回流)\n"),e("a",{attrs:{href:"https://juejin.cn/post/6844903553795014663",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[t._v("从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理")]),e("OutboundLink")],1),t._v(" "),e("img",{attrs:{src:"/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E6%AD%A5%E9%AA%A4.png",alt:"浏览器渲染步骤.png"}})]),t._v(" "),e("h4",{attrs:{id:"_1-资源外链的下载-即常问的css下载-js加载-图片加载是否会影响界面解析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-资源外链的下载-即常问的css下载-js加载-图片加载是否会影响界面解析"}},[t._v("#")]),t._v(" 1. 资源外链的下载（即常问的CSS下载，js加载，图片加载是否会影响界面解析）")]),t._v(" "),e("p",[t._v("上面介绍了html解析，渲染流程。但实际上，在解析html时，会遇到一些资源连接，此时就需要进行单独处理了\n简单起见，这里将遇到的静态资源分为一下几大类（未列举所有）：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("1. CSS样式资源\n2. JS脚本资源\n3. img图片类资源\n4. 遇到外链时的处理\n")])])]),e("p",[t._v("当遇到上述的外链时，会单独开启一个下载线程去下载资源（http1.1中是每一个资源的下载都要开启一个http请求，对应一个tcp/ip链接）")]),t._v(" "),e("p",[t._v("遇到CSS样式资源")]),t._v(" "),e("h5",{attrs:{id:"_1-css资源的处理有几个特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-css资源的处理有几个特点"}},[t._v("#")]),t._v(" 1. "),e("strong",[t._v("CSS资源的处理有几个特点：")])]),t._v(" "),e("p",[t._v("CSS下载时异步，不会阻塞浏览器构建DOM树\n但是会阻塞渲染，也就是在构建render时，会等到css下载解析完毕后才进行（这点与浏览器优化有关，防止css规则不断改变，避免了重复的构建）\n有例外，media query声明的CSS是不会阻塞渲染的\n遇到JS脚本资源")]),t._v(" "),e("h5",{attrs:{id:"_2-js脚本资源的处理有几个特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-js脚本资源的处理有几个特点"}},[t._v("#")]),t._v(" 2. "),e("strong",[t._v("JS脚本资源的处理有几个特点：")])]),t._v(" "),e("p",[t._v("阻塞浏览器的解析，也就是说发现一个外链脚本时，需等待脚本下载完成并执行后才会继续解析HTML\n浏览器的优化，一般现代浏览器有优化，在脚本阻塞时，也会继续下载其它资源（当然有并发上限），但是虽然脚本可以并行下载，解析过程仍然是阻塞的，也就是说必须这个脚本执行完毕后才会接下来的解析，并行下载只是一种优化而已\ndefer与async，普通的脚本是会阻塞浏览器解析的，但是可以加上defer或async属性，这样脚本就变成异步了，可以等到解析完毕后再执行\n注意，defer和async是有区别的： defer是延迟执行，而async是异步执行。")]),t._v(" "),e("p",[t._v("简单的说（不展开）：\nasync是异步执行，异步下载完毕后就会执行，不确保执行顺序，一定在onload前，但不确定在DOMContentLoaded事件的前或后\ndefer是延迟执行，在浏览器看起来的效果像是将脚本放在了body后面一样（虽然按规范应该是在DOMContentLoaded事件前，但实际上不同浏览器的优化效果不一样，也有可能在它后面）")]),t._v(" "),e("h5",{attrs:{id:"_3-遇到img图片类资源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-遇到img图片类资源"}},[t._v("#")]),t._v(" 3. "),e("strong",[t._v("遇到img图片类资源")])]),t._v(" "),e("p",[t._v("遇到图片等资源时，直接就是异步下载，不会阻塞解析，下载完毕后直接用图片替换原有src的地方")]),t._v(" "),e("h2",{attrs:{id:"浏览器跨域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器跨域"}},[t._v("#")]),t._v(" 浏览器跨域")]),t._v(" "),e("ol",[e("li",[e("a",{attrs:{href:"https://juejin.cn/post/6844903767226351623",target:"_blank",rel:"noopener noreferrer"}},[t._v("九种跨域方式实现原理"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://juejin.cn/post/6844904126246027278",target:"_blank",rel:"noopener noreferrer"}},[t._v("10种跨域解决方案"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"三次握手四次挥手"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三次握手四次挥手"}},[t._v("#")]),t._v(" 三次握手四次挥手")]),t._v(" "),e("ol",[e("li",[e("a",{attrs:{href:"https://juejin.cn/post/6844903625513238541",target:"_blank",rel:"noopener noreferrer"}},[t._v("三次握手四次挥手"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);r.default=s.exports}}]);