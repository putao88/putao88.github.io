(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{381:function(t,a,s){"use strict";s.r(a);var v=s(25),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"函数表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数表达式"}},[t._v("#")]),t._v(" 函数表达式")]),t._v(" "),s("ul",[s("li",[t._v("创建函数方式：函数表达式，函数声明")]),t._v(" "),s("li",[t._v("函数表达式不同于函数声明。函数声明要求有名字，但函数表达式不需要。没有名字的函数表达式也叫做匿名函数。")]),t._v(" "),s("li",[t._v("递归函数应该始终使用 arguments.callee 来递归地调用自身，不要使用函数名（函数名可能会发生变化）。")])]),t._v(" "),s("h2",{attrs:{id:"闭包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[t._v("#")]),t._v(" 闭包")]),t._v(" "),s("ul",[s("li",[t._v("有权访问另一个函数作用域中的变量的函数。")]),t._v(" "),s("li",[t._v("创建闭包的常见方式就是：在一个函数内部创建另一个函数")]),t._v(" "),s("li",[t._v("闭包会携带包含他的函数的作用域，因此会比其他函数占用更多内存")]),t._v(" "),s("li",[t._v("使用闭包可以在 JavaScript 中模仿块级作用域")]),t._v(" "),s("li",[t._v("闭包还可以用于在对象中创建私有变量")])]),t._v(" "),s("h2",{attrs:{id:"this对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#this对象"}},[t._v("#")]),t._v(" this对象")]),t._v(" "),s("ul",[s("li",[t._v("this对象是在运行时基于函数的执行环境绑定的：在全局函数中，this等于window，而当函数被作为某个对象的方法调用时，this等于那个对象。")]),t._v(" "),s("li",[t._v("匿名函数的执行环境具有全局性，因此其 this 对象通常指向 window")])]),t._v(" "),s("h2",{attrs:{id:"私有变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#私有变量"}},[t._v("#")]),t._v(" 私有变量")]),t._v(" "),s("ul",[s("li",[t._v("私有变量包括函数的参数、局部变量和函数在内部定义的其他函数")]),t._v(" "),s("li",[t._v("把有权访问私有变量和私有函数的公有方法称为特权方法")]),t._v(" "),s("li",[t._v("初始化未经声明的变量，总是会创建一个全局变量")])]),t._v(" "),s("h2",{attrs:{id:"柯里化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#柯里化"}},[t._v("#")]),t._v(" 柯里化")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://juejin.cn/post/6844903882208837645",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考资源"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("strong",[t._v("概念")]),t._v(":柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。")]),t._v(" "),s("li",[s("strong",[t._v("用途")]),t._v(":柯里化实际是把简答的问题复杂化了，但是复杂化的同时，我们在使用函数时拥有了更加多的自由度。 而这里对于函数参数的自由处理，正是柯里化的核心所在。 柯里化本质上是降低通用性，提高适用性")])])])}),[],!1,null,null,null);a.default=_.exports}}]);