(window.webpackJsonp=window.webpackJsonp||[]).push([[504],{863:function(e,t,a){"use strict";a.r(t);var s=a(25),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",{attrs:{align:"center"}},[a("a",{attrs:{href:"http://gulpjs.com"}},[a("img",{attrs:{height:"257",width:"114",src:"https://raw.githubusercontent.com/gulpjs/artwork/master/gulp-2x.png"}})])]),e._v(" "),a("h1",{attrs:{id:"vinyl-sourcemap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vinyl-sourcemap"}},[e._v("#")]),e._v(" vinyl-sourcemap")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://npmjs.com/package/vinyl-sourcemap",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"http://img.shields.io/npm/v/vinyl-sourcemap.svg",alt:"NPM version"}}),a("OutboundLink")],1),e._v(" "),a("a",{attrs:{href:"https://npmjs.com/package/vinyl-sourcemap",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"http://img.shields.io/npm/dm/vinyl-sourcemap.svg",alt:"Downloads"}}),a("OutboundLink")],1),e._v(" "),a("a",{attrs:{href:"https://travis-ci.org/gulpjs/vinyl-sourcemap",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"http://img.shields.io/travis/gulpjs/vinyl-sourcemap.svg?label=travis-ci",alt:"Build Status"}}),a("OutboundLink")],1),e._v(" "),a("a",{attrs:{href:"https://ci.appveyor.com/project/gulpjs/vinyl-sourcemap",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://img.shields.io/appveyor/ci/gulpjs/vinyl-sourcemap.svg?label=appveyor",alt:"AppVeyor Build Status"}}),a("OutboundLink")],1),e._v(" "),a("a",{attrs:{href:"https://coveralls.io/r/gulpjs/vinyl-sourcemap",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"http://img.shields.io/coveralls/gulpjs/vinyl-sourcemap/master.svg",alt:"Coveralls Status"}}),a("OutboundLink")],1),e._v(" "),a("a",{attrs:{href:"https://gitter.im/gulpjs/gulp",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://badges.gitter.im/gulpjs/gulp.png",alt:"Gitter chat"}}),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("Add/write sourcemaps to/from Vinyl files.")]),e._v(" "),a("h2",{attrs:{id:"usage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usage"}},[e._v("#")]),e._v(" Usage")]),e._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[e._v("sourcemap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" updatedFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// updatedFile will have a .sourceMap property")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// The 2nd argument can be given as a path string")]),e._v("\nsourcemap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'./maps'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" updatedFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" sourcemapFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// sourcemapFile will be a Vinyl file to be written to some location")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// updatedFile will have the .contents property updated with a sourceMappingURL that resolves to sourcemapFile")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// If not defined, the sourcemap is inlined")]),e._v("\nsourcemap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" updatedFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" sourcemapFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// sourcemapFile is undefined")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// updatedFile will have the .contents property updated with a sourceMappingURL that is an inlined sourcemap")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br")])]),a("h2",{attrs:{id:"api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[e._v("#")]),e._v(" API")]),e._v(" "),a("h3",{attrs:{id:"sourcemap-add-file-callback"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sourcemap-add-file-callback"}},[e._v("#")]),e._v(" "),a("code",[e._v("sourcemap.add(file, callback)")])]),e._v(" "),a("p",[e._v("Takes a "),a("a",{attrs:{href:"https://github.com/gulpjs/vinyl",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vinyl"),a("OutboundLink")],1),e._v(" "),a("code",[e._v("file")]),e._v(" object and a "),a("code",[e._v("callback")]),e._v(" function. It attempts to parse an inline sourcemap or load an external sourcemap for the file. If a valid sourcemap is found, the "),a("code",[e._v("sources")]),e._v(" & "),a("code",[e._v("sourcesContent")]),e._v(" properties are resolved to actual files (if possible) and a fully resolved sourcemap is attached as "),a("code",[e._v("file.sourceMap")]),e._v(". If a sourcemap is not found, a stub sourcemap is generated for the file and attached as "),a("code",[e._v("file.sourceMap")]),e._v(".")]),e._v(" "),a("p",[e._v("Once all resolution is complete, the "),a("code",[e._v("callback(err, updatedFile)")]),e._v(" is called with the "),a("code",[e._v("updatedFile")]),e._v(". If an error occurs, it will be passed as "),a("code",[e._v("err")]),e._v(" and "),a("code",[e._v("updatedFile")]),e._v(" will be undefined. "),a("strong",[e._v("Note:")]),e._v(" The original file is mutated but "),a("code",[e._v("updatedFile")]),e._v(" is passed to the callback as a convenience.")]),e._v(" "),a("p",[e._v("If the "),a("code",[e._v("file")]),e._v(" is not a Vinyl object or the contents are streaming, an Error will be passed to the "),a("code",[e._v("callback")]),e._v(".")]),e._v(" "),a("p",[e._v("If the "),a("code",[e._v("file")]),e._v(" has a "),a("code",[e._v(".sourceMap")]),e._v(" property or the contents are null, the "),a("code",[e._v("callback")]),e._v(" will be called immediately without mutation to the file.")]),e._v(" "),a("p",[e._v("All filesystem operations are optional & non-fatal so any errors will not be bubbled to the "),a("code",[e._v("callback")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"sourcemap-write-file-outputpath-callback"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sourcemap-write-file-outputpath-callback"}},[e._v("#")]),e._v(" "),a("code",[e._v("sourcemap.write(file, [outputPath,] callback)")])]),e._v(" "),a("p",[e._v("Takes a "),a("a",{attrs:{href:"https://github.com/gulpjs/vinyl",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vinyl"),a("OutboundLink")],1),e._v(" "),a("code",[e._v("file")]),e._v(" object, (optionally) an "),a("code",[e._v("outputPath")]),e._v(" string and a "),a("code",[e._v("callback")]),e._v(" function.")]),e._v(" "),a("p",[e._v("If "),a("code",[e._v("outputPath")]),e._v(" is not passed, an inline sourcemap will be generated from the "),a("code",[e._v("file.sourceMap")]),e._v(" property and appended to the "),a("code",[e._v("file.contents")]),e._v(". Once the inline sourcemap is appended, the "),a("code",[e._v("callback(err, updatedFile)")]),e._v(" is called with the "),a("code",[e._v("updatedFile")]),e._v(". If an error occurs, it will be passed as "),a("code",[e._v("err")]),e._v(" and "),a("code",[e._v("updatedFile")]),e._v(" will be undefined. "),a("strong",[e._v("Note:")]),e._v(" The original file is mutated but "),a("code",[e._v("updatedFile")]),e._v(" is passed to the callback as a convenience.")]),e._v(" "),a("p",[e._v("If "),a("code",[e._v("outputPath")]),e._v(" is passed, a new Vinyl file will be generated using "),a("code",[e._v("file.cwd")]),e._v(" and "),a("code",[e._v("file.base")]),e._v(" from the original file, the path to the external sourcemap, and the "),a("code",[e._v("file.sourceMap")]),e._v(" (as contents). The external location will be appended to the "),a("code",[e._v("file.contents")]),e._v(" of the original file. Once the new file is created and location appended, the "),a("code",[e._v("callback(err, updatedFile, sourcemapFile)")]),e._v(" is called with the "),a("code",[e._v("updatedFile")]),e._v(" and the "),a("code",[e._v("sourcemapFile")]),e._v(". If an error occurs, it will be passed as "),a("code",[e._v("err")]),e._v(" and "),a("code",[e._v("updatedFile")]),e._v("/"),a("code",[e._v("sourcemapFile")]),e._v(" will be undefined. "),a("strong",[e._v("Note:")]),e._v(" The original file is mutated but "),a("code",[e._v("updatedFile")]),e._v(" is passed to the callback as a convenience.")]),e._v(" "),a("p",[e._v("If the "),a("code",[e._v("file")]),e._v(" is not a Vinyl object or the contents are streaming, an Error will be passed to the "),a("code",[e._v("callback")]),e._v(".")]),e._v(" "),a("p",[e._v("If the "),a("code",[e._v("file")]),e._v(" doesn't have a "),a("code",[e._v(".sourceMap")]),e._v(" property or the contents are null, the "),a("code",[e._v("callback")]),e._v(" will be called immediately without mutation to the file.")]),e._v(" "),a("h2",{attrs:{id:"license"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#license"}},[e._v("#")]),e._v(" License")]),e._v(" "),a("p",[e._v("MIT")])])}),[],!1,null,null,null);t.default=n.exports}}]);