(window.webpackJsonp=window.webpackJsonp||[]).push([[229],{596:function(t,a,e){"use strict";e.r(a);var s=e(25),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",{attrs:{align:"center"}},[e("a",{attrs:{href:"http://gulpjs.com"}},[e("img",{attrs:{height:"257",width:"114",src:"https://raw.githubusercontent.com/gulpjs/artwork/master/gulp-2x.png"}})])]),t._v(" "),e("h1",{attrs:{id:"glob-watcher"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#glob-watcher"}},[t._v("#")]),t._v(" glob-watcher")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://npmjs.com/package/glob-watcher",target:"_blank",rel:"noopener noreferrer"}},[e("img",{attrs:{src:"http://img.shields.io/npm/v/glob-watcher.svg",alt:"NPM version"}}),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://npmjs.com/package/glob-watcher",target:"_blank",rel:"noopener noreferrer"}},[e("img",{attrs:{src:"http://img.shields.io/npm/dm/glob-watcher.svg",alt:"Downloads"}}),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://travis-ci.org/gulpjs/glob-watcher",target:"_blank",rel:"noopener noreferrer"}},[e("img",{attrs:{src:"http://img.shields.io/travis/gulpjs/glob-watcher.svg?label=travis-ci",alt:"Build Status"}}),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://ci.appveyor.com/project/gulpjs/glob-watcher",target:"_blank",rel:"noopener noreferrer"}},[e("img",{attrs:{src:"https://img.shields.io/appveyor/ci/gulpjs/glob-watcher.svg?label=appveyor",alt:"AppVeyor Build Status"}}),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://coveralls.io/r/gulpjs/glob-watcher",target:"_blank",rel:"noopener noreferrer"}},[e("img",{attrs:{src:"http://img.shields.io/coveralls/gulpjs/glob-watcher/master.svg",alt:"Coveralls Status"}}),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://gitter.im/gulpjs/gulp",target:"_blank",rel:"noopener noreferrer"}},[e("img",{attrs:{src:"https://badges.gitter.im/gulpjs/gulp.png",alt:"Gitter chat"}}),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("Watch globs and execute a function upon change, with intelligent defaults for debouncing and queueing.")]),t._v(" "),e("h2",{attrs:{id:"usage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usage"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" watch "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'glob-watcher'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("watch")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./*.js'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'!./something.js'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("done")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This function will be called each time a globbed file is changed")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// but is debounced with a 200ms delay (default) and queues subsequent calls")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Make sure to signal async completion with the callback")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// or by returning a stream, promise, observable or child process")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("done")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// if you need access to the `path` or `stat` object, listen")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// for the `change` event (see below)")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// if you need to listen to specific events, use the returned")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// watcher instance (see below)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Raw chokidar instance")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" watcher "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("watch")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./*.js'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'!./something.js'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Listen for the 'change' event to get `path`/`stat`")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// No async completion available because this is the raw chokidar instance")]),t._v("\nwatcher"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'change'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stat")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// `path` is the path of the changed file")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// `stat` is an `fs.Stat` object (not always available)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Listen for other events")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// No async completion available because this is the raw chokidar instance")]),t._v("\nwatcher"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'add'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stat")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// `path` is the path of the changed file")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// `stat` is an `fs.Stat` object (not always available)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br"),e("span",{staticClass:"line-number"},[t._v("27")]),e("br"),e("span",{staticClass:"line-number"},[t._v("28")]),e("br"),e("span",{staticClass:"line-number"},[t._v("29")]),e("br"),e("span",{staticClass:"line-number"},[t._v("30")]),e("br"),e("span",{staticClass:"line-number"},[t._v("31")]),e("br"),e("span",{staticClass:"line-number"},[t._v("32")]),e("br"),e("span",{staticClass:"line-number"},[t._v("33")]),e("br")])]),e("h2",{attrs:{id:"api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[t._v("#")]),t._v(" API")]),t._v(" "),e("h3",{attrs:{id:"watch-globs-options-fn"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#watch-globs-options-fn"}},[t._v("#")]),t._v(" "),e("code",[t._v("watch(globs[, options][, fn])")])]),t._v(" "),e("p",[t._v("Takes a path string, an array of path strings, a "),e("a",{attrs:{href:"https://github.com/micromatch/micromatch",target:"_blank",rel:"noopener noreferrer"}},[t._v("glob"),e("OutboundLink")],1),t._v(" string or an array of "),e("a",{attrs:{href:"https://github.com/micromatch/micromatch",target:"_blank",rel:"noopener noreferrer"}},[t._v("glob"),e("OutboundLink")],1),t._v(" strings as "),e("code",[t._v("globs")]),t._v(" to watch on the filesystem. Also optionally takes "),e("code",[t._v("options")]),t._v(" to configure the watcher and a "),e("code",[t._v("fn")]),t._v(" to execute when a file changes.")]),t._v(" "),e("p",[e("strong",[t._v("Note: As of 5.0.0, globs must use "),e("code",[t._v("/")]),t._v(" as the separator character because "),e("code",[t._v("\\\\")]),t._v(" is reserved for escape sequences (as per the Bash 4.3 & Micromatch specs). This means you can't use "),e("code",[t._v("path.join()")]),t._v(" or "),e("code",[t._v("__dirname")]),t._v(" in Windows environments. If you need to use "),e("code",[t._v("path.join()")]),t._v(", you can use "),e("a",{attrs:{href:"https://www.npmjs.com/package/normalize-path",target:"_blank",rel:"noopener noreferrer"}},[t._v("normalize-path"),e("OutboundLink")],1),t._v(" against your paths afterwards. If you need to use "),e("code",[t._v("__dirname")]),t._v(", you can set it as the "),e("code",[t._v("cwd")]),t._v(" option that gets passed directly to "),e("a",{attrs:{href:"https://github.com/paulmillr/chokidar",target:"_blank",rel:"noopener noreferrer"}},[t._v("chokidar"),e("OutboundLink")],1),t._v(". The "),e("a",{attrs:{href:"https://github.com/micromatch/micromatch#backslashes",target:"_blank",rel:"noopener noreferrer"}},[t._v("micromatch docs"),e("OutboundLink")],1),t._v(" contain more information about backslashes.")])]),t._v(" "),e("p",[t._v("Returns an instance of "),e("a",{attrs:{href:"https://github.com/paulmillr/chokidar",target:"_blank",rel:"noopener noreferrer"}},[t._v("chokidar"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("h4",{attrs:{id:"fn-callback"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fn-callback"}},[t._v("#")]),t._v(" "),e("code",[t._v("fn([callback])")])]),t._v(" "),e("p",[t._v("If the "),e("code",[t._v("fn")]),t._v(" is passed, it will be called when the watcher emits a "),e("code",[t._v("change")]),t._v(", "),e("code",[t._v("add")]),t._v(" or "),e("code",[t._v("unlink")]),t._v(" event. It is automatically debounced with a default delay of 200 milliseconds and subsequent calls will be queued and called upon completion. These defaults can be changed using the "),e("code",[t._v("options")]),t._v(".")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("fn")]),t._v(" is passed a single argument, "),e("code",[t._v("callback")]),t._v(", which is a function that must be called when work in the "),e("code",[t._v("fn")]),t._v(" is complete. Instead of calling the "),e("code",[t._v("callback")]),t._v(" function, "),e("a",{attrs:{href:"https://github.com/gulpjs/async-done#completion-and-error-resolution",target:"_blank",rel:"noopener noreferrer"}},[t._v("async completion"),e("OutboundLink")],1),t._v(" can be signalled by:")]),t._v(" "),e("ul",[e("li",[t._v("Returning a "),e("code",[t._v("Stream")]),t._v(" or "),e("code",[t._v("EventEmitter")])]),t._v(" "),e("li",[t._v("Returning a "),e("code",[t._v("Child Process")])]),t._v(" "),e("li",[t._v("Returning a "),e("code",[t._v("Promise")])]),t._v(" "),e("li",[t._v("Returning an "),e("code",[t._v("Observable")])])]),t._v(" "),e("p",[t._v("Once async completion is signalled, if another run is queued, it will be executed.")]),t._v(" "),e("h4",{attrs:{id:"options"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#options"}},[t._v("#")]),t._v(" "),e("code",[t._v("options")])]),t._v(" "),e("h5",{attrs:{id:"options-ignoreinitial"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#options-ignoreinitial"}},[t._v("#")]),t._v(" "),e("code",[t._v("options.ignoreInitial")])]),t._v(" "),e("p",[t._v("If set to "),e("code",[t._v("false")]),t._v(" the "),e("code",[t._v("fn")]),t._v(" is called during "),e("a",{attrs:{href:"https://github.com/paulmillr/chokidar",target:"_blank",rel:"noopener noreferrer"}},[t._v("chokidar"),e("OutboundLink")],1),t._v(" instantiation as it discovers the file paths. Useful if it is desirable to trigger the "),e("code",[t._v("fn")]),t._v(" during startup.")]),t._v(" "),e("p",[e("strong",[t._v("Passed through to "),e("a",{attrs:{href:"https://github.com/paulmillr/chokidar",target:"_blank",rel:"noopener noreferrer"}},[t._v("chokidar"),e("OutboundLink")],1),t._v(", but defaulted to "),e("code",[t._v("true")]),t._v(" instead of "),e("code",[t._v("false")]),t._v(".")])]),t._v(" "),e("p",[t._v("Type: "),e("code",[t._v("Boolean")])]),t._v(" "),e("p",[t._v("Default: "),e("code",[t._v("true")])]),t._v(" "),e("h5",{attrs:{id:"options-delay"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#options-delay"}},[t._v("#")]),t._v(" "),e("code",[t._v("options.delay")])]),t._v(" "),e("p",[t._v("The delay to wait before triggering the "),e("code",[t._v("fn")]),t._v(". Useful for waiting on many changes before doing the work on changed files, e.g. find-and-replace on many files.")]),t._v(" "),e("p",[t._v("Type: "),e("code",[t._v("Number")])]),t._v(" "),e("p",[t._v("Default: "),e("code",[t._v("200")]),t._v(" (milliseconds)")]),t._v(" "),e("h5",{attrs:{id:"options-queue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#options-queue"}},[t._v("#")]),t._v(" "),e("code",[t._v("options.queue")])]),t._v(" "),e("p",[t._v("Whether or not a file change should queue the "),e("code",[t._v("fn")]),t._v(" execution if the "),e("code",[t._v("fn")]),t._v(" is already running. Useful for a long running "),e("code",[t._v("fn")]),t._v(".")]),t._v(" "),e("p",[t._v("Type: "),e("code",[t._v("Boolean")])]),t._v(" "),e("p",[t._v("Default: "),e("code",[t._v("true")])]),t._v(" "),e("h5",{attrs:{id:"options-events"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#options-events"}},[t._v("#")]),t._v(" "),e("code",[t._v("options.events")])]),t._v(" "),e("p",[t._v("An event name or array of event names to listen for. Useful if you only need to watch specific events.")]),t._v(" "),e("p",[t._v("Type: "),e("code",[t._v("String | Array<String>")])]),t._v(" "),e("p",[t._v("Default: "),e("code",[t._v("[ 'add', 'change', 'unlink' ]")])]),t._v(" "),e("h5",{attrs:{id:"other"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#other"}},[t._v("#")]),t._v(" other")]),t._v(" "),e("p",[t._v("Options are passed directly to "),e("a",{attrs:{href:"https://github.com/paulmillr/chokidar",target:"_blank",rel:"noopener noreferrer"}},[t._v("chokidar"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"license"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#license"}},[t._v("#")]),t._v(" License")]),t._v(" "),e("p",[t._v("MIT")])])}),[],!1,null,null,null);a.default=n.exports}}]);