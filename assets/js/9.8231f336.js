(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{368:function(t,a,v){"use strict";v.r(a);var _=v(25),s=Object(_.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"作用域"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[t._v("#")]),t._v(" 作用域")]),t._v(" "),v("h3",{attrs:{id:"执行环境"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#执行环境"}},[t._v("#")]),t._v(" 执行环境")]),t._v(" "),v("ul",[v("li",[t._v("执行环境定义了变量或函数有权访问的其他数据。")]),t._v(" "),v("li",[t._v("每个执行环境都有一个与之关联的变量对象。环境中定义的所有变量和函数都保存在这个对象中")]),t._v(" "),v("li",[t._v("每个函数都有自己的执行环境，当执行流进入一个函数时，函数的环境就会被推入一个环境栈中。而在函数执行之后，栈将其环境弹出，把控制权限返回给之前的执行环境")])]),t._v(" "),v("h3",{attrs:{id:"作用域链"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#作用域链"}},[t._v("#")]),t._v(" 作用域链")]),t._v(" "),v("ul",[v("li",[t._v("当代码在在一个环境中执行时，会创建变量对象的一个作用域链")]),t._v(" "),v("li",[t._v("作用域链的用途是保证对执行环境有权访问的所有变量和函数的有序访问")]),t._v(" "),v("li",[t._v("作用域链本质上是一个指向变量对象的指针列表，它只引用，但不实际包含变量对象")])]),t._v(" "),v("h2",{attrs:{id:"函数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[t._v("#")]),t._v(" 函数")]),t._v(" "),v("h3",{attrs:{id:"函数表达式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#函数表达式"}},[t._v("#")]),t._v(" 函数表达式")]),t._v(" "),v("ul",[v("li",[t._v("创建函数方式：")]),t._v(" "),v("li",[t._v("函数表达式，函数声明")]),t._v(" "),v("li",[t._v("函数表达式不同于函数声明。函数声明要求有名字，但函数表达式不需要。没有名字的函数表达式也叫做匿名函数。")]),t._v(" "),v("li",[t._v("递归函数应该始终使用 arguments.callee 来递归地调用自身，不要使用函数名——函数名可能会发生变化。")])]),t._v(" "),v("h3",{attrs:{id:"闭包"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[t._v("#")]),t._v(" 闭包")]),t._v(" "),v("ul",[v("li",[t._v("有权访问另一个函数作用域中的变量的函数。")]),t._v(" "),v("li",[t._v("创建闭包的常见方式就是：在一个函数内部创建另一个函数")]),t._v(" "),v("li",[t._v("闭包会携带包含他的函数的作用域，因此会比其他函数占用更多内存")]),t._v(" "),v("li",[t._v("使用闭包可以在 JavaScript 中模仿块级作用域")]),t._v(" "),v("li",[t._v("闭包还可以用于在对象中创建私有变量")])]),t._v(" "),v("h3",{attrs:{id:"this对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#this对象"}},[t._v("#")]),t._v(" this对象")]),t._v(" "),v("ul",[v("li",[t._v("this对象是在运行时基于函数的执行环境绑定的：在全局函数中，this等于window，而当函数被作为某个对象的方法调用时，this等于那个对象。")]),t._v(" "),v("li",[t._v("匿名函数的执行环境具有全局性，因此其 this 对象通常指向 window")])]),t._v(" "),v("h3",{attrs:{id:"私有变量"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#私有变量"}},[t._v("#")]),t._v(" 私有变量")]),t._v(" "),v("ul",[v("li",[t._v("私有变量包括函数的参数、局部变量和函数在内部定义的其他函数")]),t._v(" "),v("li",[t._v("把有权访问私有变量和私有函数的公有方法称为特权方法")]),t._v(" "),v("li",[t._v("初始化未经声明的变量，总是会创建一个全局变量")])])])}),[],!1,null,null,null);a.default=s.exports}}]);