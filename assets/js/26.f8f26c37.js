(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{394:function(e,t,v){"use strict";v.r(t);var a=v(25),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h2",{attrs:{id:"参考资料"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://wangdoc.com/javascript/events/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("事件模型"),v("OutboundLink")],1)]),e._v(" "),v("li",[v("a",{attrs:{href:"https://wangdoc.com/javascript/events/eventtarget.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("EventTarget 接口"),v("OutboundLink")],1)]),e._v(" "),v("li",[v("a",{attrs:{href:"https://wangdoc.com/javascript/events/model.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("事件模型"),v("OutboundLink")],1)])]),e._v(" "),v("h2",{attrs:{id:"基础知识"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基础知识"}},[e._v("#")]),e._v(" 基础知识")]),e._v(" "),v("h3",{attrs:{id:"eventtarget-接口"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#eventtarget-接口"}},[e._v("#")]),e._v(" EventTarget 接口")]),e._v(" "),v("ul",[v("li",[e._v("DOM 节点的事件操作（监听和触发），都定义在EventTarget接口。所有节点对象都部署了这个接口，其他一些需要事件通信的浏览器内置对象（比如，XMLHttpRequest、AudioNode、AudioContext）也部署了这个接口。")]),e._v(" "),v("li",[e._v("该接口主要提供三个实例方法:\n"),v("ol",[v("li",[e._v("addEventListener()：绑定事件的监听函数")]),e._v(" "),v("li",[e._v("removeEventListener()：移除事件的监听函数")]),e._v(" "),v("li",[e._v("dispatchEvent()：触发事件")])])])]),e._v(" "),v("h3",{attrs:{id:"事件模型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#事件模型"}},[e._v("#")]),e._v(" 事件模型")]),e._v(" "),v("ul",[v("li",[e._v("浏览器的事件模型，就是通过监听函数（listener）对事件做出反应。事件发生后，浏览器监听到了这个事件，就会执行对应的监听函数。这是事件驱动编程模式（event-driven）的主要编程方式。")]),e._v(" "),v("li",[e._v("监听函数:\n"),v("ul",[v("li",[e._v("HTML 的 on- 属性")]),e._v(" "),v("li",[e._v("元素节点的事件属性")]),e._v(" "),v("li",[e._v("EventTarget.addEventListener()")])])]),e._v(" "),v("li",[e._v("监听函数内部的this指向触发事件的那个元素节点。")]),e._v(" "),v("li",[e._v("一个事件发生后，会在子元素和父元素之间传播（propagation）。这种传播分成三个阶段。\n"),v("ul",[v("li",[e._v("第一阶段：从window对象传导到目标节点（上层传到底层），称为“捕获阶段”（capture phase）。")]),e._v(" "),v("li",[e._v("第二阶段：在目标节点上触发，称为“目标阶段”（target phase）。")]),e._v(" "),v("li",[e._v("第三阶段：从目标节点传导回window对象（从底层传回上层），称为“冒泡阶段”（bubbling phase）。")])])]),e._v(" "),v("li",[e._v("注意，浏览器总是假定click事件的目标节点，就是点击位置嵌套最深的那个节点")]),e._v(" "),v("li",[e._v("由于事件会在冒泡阶段向上传播到父节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件。这种方法叫做事件的代理（delegation")])]),e._v(" "),v("h3",{attrs:{id:"event-对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#event-对象"}},[e._v("#")]),e._v(" Event 对象")]),e._v(" "),v("ul",[v("li",[e._v("事件发生以后，会产生一个事件对象，作为参数传给监听函数。浏览器原生提供一个Event对象，所有的事件都是这个对象的实例，或者说继承了Event.prototype对象。Event对象本身就是一个构造函数，可以用来生成新的实例。")]),e._v(" "),v("li",[e._v("实例属性\n"),v("ul",[v("li",[e._v("Event.bubbles，Event.eventPhase")]),e._v(" "),v("li",[e._v("Event.cancelable，Event.cancelBubble，event.defaultPrevented")]),e._v(" "),v("li",[e._v("Event.currentTarget，Event.target")]),e._v(" "),v("li",[e._v("Event.type")]),e._v(" "),v("li",[e._v("Event.timeStamp")]),e._v(" "),v("li",[e._v("Event.isTrusted")]),e._v(" "),v("li",[e._v("Event.detail")])])]),e._v(" "),v("li",[e._v("实例方法\n"),v("ul",[v("li",[e._v("Event.preventDefault()")]),e._v(" "),v("li",[e._v("Event.stopPropagation()")]),e._v(" "),v("li",[e._v("Event.stopImmediatePropagation()")]),e._v(" "),v("li",[e._v("Event.composedPath()")])])])]),e._v(" "),v("h3",{attrs:{id:"鼠标事件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#鼠标事件"}},[e._v("#")]),e._v(" 鼠标事件")]),e._v(" "),v("ul",[v("li",[e._v("鼠标事件主要有下面这些，所有事件都继承了MouseEvent接口")]),e._v(" "),v("li",[e._v("MouseEvent接口代表了鼠标相关的事件，单击（click）、双击（dblclick）、松开鼠标键（mouseup）、按下鼠标键（mousedown）等动作，所产生的事件对象都是MouseEvent实例。此外，滚轮事件和拖拉事件也是MouseEvent实例。")]),e._v(" "),v("li",[e._v("MouseEvent接口继承了Event接口，所以拥有Event的所有属性和方法，并且还提供鼠标独有的属性和方法。")])]),e._v(" "),v("h3",{attrs:{id:"键盘事件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#键盘事件"}},[e._v("#")]),e._v(" 键盘事件")]),e._v(" "),v("ul",[v("li",[e._v("键盘事件由用户击打键盘触发，主要有keydown、keypress、keyup三个事件，它们都继承了KeyboardEvent接口。\n"),v("ul",[v("li",[e._v("keydown：按下键盘时触发。")]),e._v(" "),v("li",[e._v("keypress：按下有值的键时触发，即按下 Ctrl、Alt、Shift、Meta 这样无值的键，这个事件不会触发。对于有值的键，按下时先触发keydown事件，再触发这个事件。")]),e._v(" "),v("li",[e._v("keyup：松开键盘时触发该事件")])])])]),e._v(" "),v("h3",{attrs:{id:"进度事件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#进度事件"}},[e._v("#")]),e._v(" 进度事件")]),e._v(" "),v("ul",[v("li",[e._v("进度事件用来描述资源加载的进度，主要由 AJAX 请求、"),v("img"),e._v("、"),v("audio",[e._v("、"),v("video",[e._v("、"),v("style")])])])])])}),[],!1,null,null,null);t.default=n.exports}}]);