(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{394:function(t,e,r){"use strict";r.r(e);var a=r(25),i=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"参考资料"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://cn.redux.js.org/introduction/getting-started",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redux中文官网"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://www.redux.org.cn/docs/react-redux/api.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("React-Redux"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://tech.meituan.com/2017/07/14/redux-design-code.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redux从设计到源码"),r("OutboundLink")],1)])]),t._v(" "),r("h2",{attrs:{id:"redux基础使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redux基础使用"}},[t._v("#")]),t._v(" Redux基础使用")]),t._v(" "),r("h3",{attrs:{id:"redux工作流"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redux工作流"}},[t._v("#")]),t._v(" Redux工作流")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://awps-assets.meituan.net/mit-x/blog-images-bundle-2017/adc95a4c.png",alt:"Redux工作流"}}),t._v("\n首先，我们看下几个核心概念：")]),t._v(" "),r("ul",[r("li",[t._v("Store：保存数据的地方，你可以把它看成一个容器，整个应用只能有一个Store。")]),t._v(" "),r("li",[t._v("State：Store对象包含所有数据，如果想得到某个时点的数据，就要对Store生成快照，这种时点的数据集合，就叫做State。")]),t._v(" "),r("li",[t._v("Action：State的变化，会导致View的变化。但是，用户接触不到State，只能接触到View。所以，State的变化必须是View导致的。Action就是View发出的通知，表示State应该要发生变化了。")]),t._v(" "),r("li",[t._v("Action Creator：View要发送多少种消息，就会有多少种Action。如果都手写，会很麻烦，所以我们定义一个函数来生成Action，这个函数就叫Action Creator。")]),t._v(" "),r("li",[t._v("Reducer：Store收到Action以后，必须给出一个新的State，这样View才会发生变化。这种State的计算过程就叫做Reducer。Reducer是一个函数，它接受Action和当前State作为参数，返回一个新的State。")]),t._v(" "),r("li",[t._v("dispatch：是View发出Action的唯一方法。")]),t._v(" "),r("li",[t._v("然后我们过下整个工作流程：")])]),t._v(" "),r("ol",[r("li",[t._v("首先，用户（通过View）发出Action，发出方式就用到了dispatch方法。")]),t._v(" "),r("li",[t._v("然后，Store自动调用Reducer，并且传入两个参数：当前State和收到的Action，Reducer会返回新的State")]),t._v(" "),r("li",[t._v("State一旦有变化，Store就会调用监听函数，来更新View。\n到这儿为止，一次用户交互流程结束。可以看到，在整个流程中数据都是单向流动的，这种方式保证了流程的清晰。")])])])}),[],!1,null,null,null);e.default=i.exports}}]);